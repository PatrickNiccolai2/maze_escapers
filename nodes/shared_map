#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

# Import of python modules.
import math # use of pi.
import tf
from collections import deque
import scipy.optimize as scipy_opt
from multiprocessing import Process

# import of relevant libraries.
import rospy # module for ROS APIs

from maze_escapers.srv import AddToMap, AddToMapResponse
from maze_escapers.srv import ExplorerBid, ExplorerBidResponse
from maze_escapers.srv import Assignment, AssignmentResponse
from maze_escapers.srv import Ready, ReadyResponse
from maze_escapers.srv import PathToGoal, PathToGoalResponse

from maze_escapers.maze_reader import MazeReader


class SharedMap():
    def __init__(self, auction_type="patrick_auction"):
        # Probably need to do something better for this
        self.robot_names = ["/robot_0", "/robot_1", "/robot_2"]
        self.ready_dict = {}
        self.robot_last_vertex_dict = {"/robot_0":[1,1], "/robot_1":[1,1], "/robot_2":[1,1]}
        self.auction_type = auction_type

        self.get_whole_graph()
        self.known_vertices = []
        self.known_edges = []
        self.init_add_to_map_service()
        self.init_ready_service()
        self.init_path_to_goal_service()

        if(auction_type == "zack_auction"):
            rospy.sleep(5)
            rospy.Timer(rospy.Duration(2), self.timer_callback)

    '''
    Use maze_reader.py to generate a graph of a given maze image, specified
    in filename
    self.whole_graph_vertices is a list of the coords of vertices for the whole maze
    self.whole_graph_edges is a list of the edges between those vertices 
    '''
    def get_whole_graph(self):
        filename = "/root/catkin_ws/src/maze_escapers/medmaze2.png"
        maze_reader = MazeReader(filename)
        self.whole_graph_vertices, self.whole_graph_edges = maze_reader.get_graph_representation()
        '''
        print("Vertices")
        print(self.whole_graph_vertices)
        print("Edges")
        print(self.whole_graph_edges)
        '''

        # Init frontier as empty list
        self.frontier = []

    '''
    Called when a robot discovers a new vertex. Add the vertices connected to
    that vertex that have not already been discovered to the frontier
    '''
    def update_frontier(self, new_vertex):
        neighbors = self.get_neighbors(new_vertex)

        for neighbor in neighbors:
            if(neighbor not in self.known_vertices and neighbor not in self.frontier):
                self.frontier.append(neighbor)

        print("new frontier")
        print(self.frontier)

    '''
    Get the neighbors of a given vertex, looking at the whole maze
    '''
    def get_neighbors(self, vertex):
        neighbors = []

        for edge in self.whole_graph_edges:
            if(edge[0] == vertex):
                neighbors.append(edge[1])
            elif(edge[1] == vertex):
                neighbors.append(edge[0])

        return neighbors

    '''
    Get the neighbors of a given vertex, looking at the known part maze
    '''
    def get_known_neighbors(self, vertex):
        neighbors = []

        for edge in self.known_edges:
            if(edge[0] == vertex):
                neighbors.append(edge[1])
            elif(edge[1] == vertex):
                neighbors.append(edge[0])

        return neighbors

    ############################## AUCTION ##############################

    '''
    Auction to get bids from all robots for all vertices in frontier, then
    assign 
    '''
    def start_patrick_auction(self):
        print("In auction")
        print("frontier = " + str(self.frontier))
        bids_dict = {}
        for robot_name in self.robot_names:
            bids_dict[robot_name] = {}
            # For each robot, reate proxy for that robots service
            bid_server = robot_name + "/bid_service"
            rospy.wait_for_service(bid_server)
            bid_proxy = rospy.ServiceProxy(bid_server, ExplorerBid)
            for frontier_node in self.frontier:
                resp = bid_proxy(x=frontier_node[0], y=frontier_node[1])
                bid = resp.bid 
                bids_dict[robot_name][tuple(frontier_node)] = bid
                #print(bid)

        print("Bids:")
        print(bids_dict)
        self.assign_bids(bids_dict)

    def start_zack_auction(self):
        print("In auction")
        print("frontier = " + str(self.frontier))
        bids_dict = {}

        ready_robots = []
        for name in self.robot_names:
            if(self.ready_dict[name] == 1):
                ready_robots.append(name)

        for robot_name in ready_robots:
            bids_dict[robot_name] = {}
            # For each robot, reate proxy for that robots service
            bid_server = robot_name + "/bid_service"
            rospy.wait_for_service(bid_server)
            bid_proxy = rospy.ServiceProxy(bid_server, ExplorerBid)
            for frontier_node in self.frontier:
                resp = bid_proxy(x=frontier_node[0], y=frontier_node[1])
                bid = resp.bid 
                bids_dict[robot_name][tuple(frontier_node)] = bid
                #print(bid)

        print("Bids:")
        print(bids_dict)
        if(len(bids_dict) > 0):
            self.assign_bids(bids_dict)

    '''
    Assign bids using Hungarian algorithm
    '''
    def assign_bids(self, bids_dict):
        # Create matrix 
        matrix = []
        robot_names_order = []
        vertices_order = []
        name_index = 0
        for robot_name in bids_dict:
            robot_names_order.append(robot_name)
            row = []
            vertex_index = 0
            for vertex in bids_dict[robot_name]:
                if(name_index == 0):
                    vertices_order.append(vertex)
                row.append(bids_dict[robot_name][vertex])
                vertex_index += 1

            matrix.append(row)
            name_index += 1

        print(matrix)
        # Get row and col indices for optimal assignment
        hungarian_row, hungarian_col = scipy_opt.linear_sum_assignment(matrix)

        # We care about col
        print(hungarian_row)
        print(hungarian_col)

        print(robot_names_order)
        print(vertices_order)

        # Create assignments_dict with optimal assignment
        assignments_dict = {}
        for i in range(len(hungarian_row)):
            assigned_name = robot_names_order[hungarian_row[i]]
            assigned_vertex = vertices_order[hungarian_col[i]]
            assignments_dict[assigned_name] = assigned_vertex

            try:
                self.frontier.remove(list(assigned_vertex))
            except:
                pass

        print("assignments:")
        print(assignments_dict)

        self.get_path(assignments_dict)

    def get_path(self, assignments_dict):
        robot_paths_dict = {}
        for robot_name in assignments_dict:
            start = self.robot_last_vertex_dict[robot_name]
            goal = assignments_dict[robot_name]
            path = self.bfs(tuple(start), tuple(goal))
            robot_paths_dict[robot_name] = path 

            # Update for next time
            self.robot_last_vertex_dict[robot_name] = goal

        print("paths")
        print(robot_paths_dict)
        self.send_assignments(robot_paths_dict)

    '''
    After the auction, send all assignments
    '''
    def send_assignments(self, robot_paths_dict):
        threads = []
        for robot_name in robot_paths_dict:
            # Robot is no longer ready
            self.ready_dict[robot_name] = 0

        for robot_name in robot_paths_dict:
            print("Making thread for " + robot_name)
            t = Process(target=self.send_assignment, args=[robot_name, robot_paths_dict])
            threads.append(t)
            t.start()

        #for thread in threads:
        #    thread.join()

        print("All processes joined")
            
    def send_assignment(self, robot_name, robot_paths_dict):
        # Get robot's service
        print("sending goal to " + robot_name)
        assignment_server = robot_name + "/assignment_service"
        rospy.wait_for_service(assignment_server)
        assigment_proxy = rospy.ServiceProxy(assignment_server, Assignment)

        # Flatten path to 1d array
        path_flat = []
        path_coords = robot_paths_dict[robot_name]
        for coord in path_coords:
            path_flat.append(coord[0])
            path_flat.append(coord[1])

        # Robot is no longer ready
        self.ready_dict[robot_name] = 0

        # Send flattened path to service
        resp = assigment_proxy(flat_path=path_flat)

    ############################## SERVICES ##############################

    '''
    init service robots use to add a vertex they discovered to the shared map
    '''
    def init_add_to_map_service(self):
        s = rospy.Service('/add_to_map_service', AddToMap, self.handle_add_to_map_service_request)

    '''
    Add vertex and its edges to the shared map.
    Return 1 if the vertex was not already discovered, return -1 if the vertex
    was already discovered
    '''
    def handle_add_to_map_service_request(self, req):
        print("in handle_add_to_map_service_request, x = " + str(req))
        vertex = [req.x, req.y]

        if(vertex not in self.known_vertices):
            # Remove vertex from frontier

            # Update the frontier 
            self.update_frontier(vertex)

            # Add vertex to known_vertices
            self.known_vertices.append(vertex)

            # Add the vertex's edges to known_edges
            for edge in self.whole_graph_edges:
                if(edge[0] == vertex or edge[1] == vertex):
                    if(edge not in self.known_edges):
                        self.known_edges.append(edge)

            return 1
        else:
            return -1 

    '''
    This service is used by robots to tell shared_map that they are ready
    '''
    def init_ready_service(self):
        for robot_name in self.robot_names:
            self.ready_dict[robot_name] = 0
        s = rospy.Service('/ready_service', Ready, self.handle_ready)

    '''
    req has the number of the robot that sent that it is ready
    Update ready_dict for that robot to 1
    '''
    def handle_ready(self, req):
        robot_name = "/robot_" + str(req.robot_num)
        print(robot_name + " is ready")
        self.ready_dict[robot_name] = 1
        print(self.ready_dict)
        
        if self.auction_type == "zack_auction":
            num_ready = 0
            for name in self.robot_names:
                if self.ready_dict[name] == 1:
                    num_ready += 1
            if num_ready >= len(self.robot_names) // 3:
                rospy.sleep(1)
                #self.start_zack_auction()

            return ReadyResponse(response=1)
        
        elif self.auction_type == "patrick_auction":
            # Check if all robots are ready, if they are we can start a new auction
            all_ready = True
            for name in self.robot_names:
                if(self.ready_dict[name] == 0):
                    all_ready = False
            if(all_ready):
                self.start_patrick_auction()

            return ReadyResponse(response=1)

    '''
    Service which robots use to get their path to the goal, once its found
    '''
    def init_path_to_goal_service(self):
        s = rospy.Service('/path_to_goal_service', PathToGoal, self.handle_path_to_goal)

    '''
    Use bfs to get a robot's path to the goal
    '''
    def handle_path_to_goal(self, req):
        print("In handle_path_to_goal")
        print(req)
        start_coord = [req.my_x, req.my_y]
        goal_coord = [req.goal_x, req.goal_y]

        path_coords = self.bfs(tuple(start_coord), tuple(goal_coord))

        # Flatten path to 1d array
        path_flat = []
        for coord in path_coords:
            path_flat.append(coord[0])
            path_flat.append(coord[1])

        return PathToGoalResponse(flat_path = path_flat)

    ############################## BFS ##############################

    def bfs(self, start, goal):
        bfs_dic = {}
        path = []
        goal_reached = False
        bfs_dic[start] = None

        bfs_frontier = deque()
        bfs_frontier.append(start)

        # In waves, the goal is searched for
        while len(bfs_frontier) > 0:
            v = bfs_frontier.popleft()
            # Each adjacent vertex of start is searched
            if v != None:
                for each in self.get_known_neighbors(list(v)):
                    each = tuple(each)
                    # Determines if a vertex has already been searched
                    if each in bfs_dic:
                        pass
                    else:
                        bfs_frontier.append(each)
                        bfs_dic[each] = v
            # Breaks if goal has been found
            if v == goal:
                goal_reached = True
                break
        # If the goal has been found, the path list is created and returned
        if goal_reached:
            curr = goal
            while curr != None:
                path.append(curr)
                curr = bfs_dic[curr]

        return path

    def timer_callback(self, event):
        print("Timer callback")
        self.start_zack_auction()

def main():
    """Main function."""

    # 1st. initialization of node.
    rospy.init_node("shared_map")

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    sharedmap = SharedMap()

    # Robot moves 1 m forward, rotate of 180 degrees, and moves 1 m forward.
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")


if __name__ == "__main__":
    """Run the main function."""
    main()
